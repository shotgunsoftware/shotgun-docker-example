global
    log 127.0.0.1 local2
    # maxconn 2000 # (default)
    stats socket /tmp/admin.sock mode 660 level admin
    stats timeout 30s
    user root
    group root
    # set default parameters to the intermediate configuration (https://mozilla.github.io/server-side-tls/ssl-config-generator/)
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    retries 3
    option redispatch
    timeout connect  5000
    timeout client  10000
    timeout server  15m
    errorfile 503 /usr/local/etc/haproxy/errors/maintenance.http

#Basic http Auth
#Uncomment to enable Basic http Auth
#See more https://www.haproxy.org/download/1.7/doc/configuration.txt in `3.4. Userlists`
#Use https://quickhash.com/ to generate passwords as an example.
#username/password for Auth - test/password
#-------
#userlist SiteUsers
#    user test password $6$7075aba42953b669$J5tqLycE0txyWFHT8dUBsBxBASeqNs2mA1izPeOEXz.ccSDj9ty0hePmXDn5H8IKk8b0nvlZfALRUDdGcTvoB0

frontend shotgun
    bind *:80
    # Uncomment to enable https
    #bind *:443 ssl crt /usr/local/etc/haproxy/ssl/combined_cert.pem
    # Uncomment to redirect http traffic to https
    #redirect scheme https code 301 if !{ ssl_fc }
    mode http
    use_backend %[req.hdr(host),lower,map_dom(/usr/local/etc/haproxy/mapping.map,staging)]

#make sure you run production app container on port 8080
backend production
    mode http
    balance roundrobin
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    # Uncomment to enable Basic http Auth
    #acl auth_check http_auth(SiteUsers)
    #http-request auth realm Access if !auth_check
    server production <Production Host  IP>:8080 check

#make sure you run staging app container on port 8080
#backend staging
#    mode http
#    balance roundrobin
#    option forwardfor
#    http-request set-header X-Forwarded-Port %[dst_port]
#    http-request add-header X-Forwarded-Proto https if { ssl_fc }
#    # Uncomment to enable Basic http Auth
#    #acl auth_check http_auth(SiteUsers)
#    #http-request auth realm Access if !auth_check
#    server staging <Staging Host IP>:8081 check
